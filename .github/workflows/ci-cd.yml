name: AI Economic Advisor CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
        node-version: [16, 18, 20]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r banking-services/requirements.txt
        pip install -r backend/requirements.txt
        pip install pytest pytest-cov flake8

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm install

    - name: Lint Python code
      run: |
        flake8 banking-services/ backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 banking-services/ backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test Banking Services
      run: |
        cd banking-services
        python -m pytest tests/ -v --cov=. --cov-report=xml

    - name: Test Backend
      run: |
        cd backend
        python -m pytest tests/ -v --cov=. --cov-report=xml

    - name: Test Frontend
      run: |
        cd frontend
        npm test

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Build and push User Service Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./banking-services/userservice
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/userservice:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Build and push Balance Service Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./banking-services/balanceservice
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/balanceservice:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Build and push Transaction Service Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./banking-services/transactionservice
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/transactionservice:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Deploy to staging
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|image: ai-economic-advisor/|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/|g" kubernetes/*.yaml
        sed -i "s|:latest|:${{ github.sha }}|g" kubernetes/*.yaml
        
        # Apply manifests
        kubectl apply -f kubernetes/namespace.yaml
        kubectl apply -f kubernetes/secrets.yaml
        kubectl apply -f kubernetes/
        
        # Wait for rollout
        kubectl rollout status deployment/frontend -n ai-economic-advisor
        kubectl rollout status deployment/userservice -n ai-economic-advisor
        kubectl rollout status deployment/balanceservice -n ai-economic-advisor
        kubectl rollout status deployment/transactionservice -n ai-economic-advisor

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Deploy to production
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|image: ai-economic-advisor/|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/|g" kubernetes/*.yaml
        sed -i "s|:latest|:${{ github.sha }}|g" kubernetes/*.yaml
        
        # Apply manifests
        kubectl apply -f kubernetes/namespace.yaml
        kubectl apply -f kubernetes/secrets.yaml
        kubectl apply -f kubernetes/
        
        # Wait for rollout
        kubectl rollout status deployment/frontend -n ai-economic-advisor
        kubectl rollout status deployment/userservice -n ai-economic-advisor
        kubectl rollout status deployment/balanceservice -n ai-economic-advisor
        kubectl rollout status deployment/transactionservice -n ai-economic-advisor

    - name: Run smoke tests
      run: |
        # Get service URL
        FRONTEND_URL=$(kubectl get service frontend -n ai-economic-advisor -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Wait for service to be ready
        sleep 60
        
        # Run basic smoke tests
        curl -f http://$FRONTEND_URL/ || exit 1
        curl -f http://$FRONTEND_URL/health || exit 1

  load-test:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install Locust
      run: |
        pip install locust

    - name: Run load tests
      run: |
        cd load-testing
        locust -f locustfile.py --host=http://staging.ai-economic-advisor.com \
               --users=50 --spawn-rate=5 --run-time=5m --headless \
               --html=load-test-report.html

    - name: Upload load test results
      uses: actions/upload-artifact@v3
      with:
        name: load-test-report
        path: load-testing/load-test-report.html